{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar absf = require( '@stdlib/math-base-special-absf' );\nvar maxf = require( '@stdlib/math-base-special-maxf' );\nvar f32 = require( '@stdlib/number-float64-base-to-float32' );\nvar FLOAT32_BIGGEST = require( '@stdlib/constants-float32-max' );\nvar FLOAT32_SMALLEST = require( '@stdlib/constants-float32-smallest-normal' );\nvar EPS = require( '@stdlib/constants-float32-eps' );\nvar Complex64 = require( '@stdlib/complex-float32-ctor' );\nvar realf = require( '@stdlib/complex-float32-real' );\nvar imagf = require( '@stdlib/complex-float32-imag' );\n\n\n// VARIABLES //\n\nvar ONE = f32( 1.0 );\nvar TWO = f32( 2.0 );\nvar HALF = f32( 0.5 );\nvar LARGE_THRESHOLD = f32( FLOAT32_BIGGEST * HALF );\nvar SMALL_THRESHOLD = f32( FLOAT32_SMALLEST * f32( TWO/EPS ) );\nvar RECIP_EPS_SQR = f32( TWO / f32(EPS*EPS) );\n\n\n// MAIN //\n\n/**\n* Computes the inverse of a single-precision complex floating-point number.\n*\n* ## References\n*\n* -   Baudin, Michael, and Robert L. Smith. 2012. \"A Robust Complex Division in Scilab.\" _arXiv_ abs/1210.4539 \\[cs.MS\\] (October): 1\u201325. <https://arxiv.org/abs/1210.4539>.\n*\n* @param {Complex64} z - complex number\n* @returns {Complex64} result\n*\n* @example\n* var Complex64 = require( '@stdlib/complex-float32-ctor' );\n* var realf = require( '@stdlib/complex-float32-real' );\n* var imagf = require( '@stdlib/complex-float32-imag' );\n*\n* var v = cinvf( new Complex64( 2.0, 4.0 ) );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns ~0.1\n*\n* var im = imagf( v );\n* // returns ~-0.2\n*/\nfunction cinvf( z ) {\n\tvar ab;\n\tvar re;\n\tvar im;\n\tvar s;\n\tvar r;\n\tvar t;\n\n\tre = realf( z );\n\tim = imagf( z );\n\tab = maxf( absf(re), absf(im) );\n\ts = ONE;\n\tif ( ab >= LARGE_THRESHOLD ) {\n\t\tre = f32( re * HALF );\n\t\tim = f32( im * HALF );\n\t\ts = f32( s * HALF );\n\t} else if ( ab <= SMALL_THRESHOLD ) {\n\t\tre = f32( re * RECIP_EPS_SQR );\n\t\tim = f32( im * RECIP_EPS_SQR );\n\t\ts = f32( s * RECIP_EPS_SQR );\n\t}\n\tif ( absf( im ) <= absf( re ) ) {\n\t\tr = f32( im / re );\n\t\tt = f32( ONE / f32( re + f32(im*r) ) );\n\t\tre = t;\n\t\tim = f32( -r * t );\n\t} else {\n\t\tr = f32( re / im );\n\t\tt = f32( ONE / f32( im + f32(re*r) ) );\n\t\tre = f32( r * t );\n\t\tim = -t;\n\t}\n\tre = f32( re * s );\n\tim = f32( im * s );\n\treturn new Complex64( re, im );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cinvf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the inverse of a single-precision complex floating-point number.\n*\n* @module @stdlib/math-base-special-cinvf\n*\n* @example\n* var Complex64 = require( '@stdlib/complex-float32-ctor' );\n* var realf = require( '@stdlib/complex-float32-real' );\n* var imagf = require( '@stdlib/complex-float32-imag' );\n* var cinvf = require( '@stdlib/math-base-special-cinvf' );\n*\n* var v = cinvf( new Complex64( 2.0, 4.0 ) );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns ~0.1\n*\n* var im = imagf( v );\n* // returns ~-0.2\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAO,QAAS,gCAAiC,EACjDC,EAAO,QAAS,gCAAiC,EACjDC,EAAM,QAAS,wCAAyC,EACxDC,EAAkB,QAAS,+BAAgC,EAC3DC,EAAmB,QAAS,2CAA4C,EACxEC,EAAM,QAAS,+BAAgC,EAC/CC,EAAY,QAAS,8BAA+B,EACpDC,EAAQ,QAAS,8BAA+B,EAChDC,EAAQ,QAAS,8BAA+B,EAKhDC,EAAMP,EAAK,CAAI,EACfQ,EAAMR,EAAK,CAAI,EACfS,EAAOT,EAAK,EAAI,EAChBU,EAAkBV,EAAKC,EAAkBQ,CAAK,EAC9CE,EAAkBX,EAAKE,EAAmBF,EAAKQ,EAAIL,CAAI,CAAE,EACzDS,EAAgBZ,EAAKQ,EAAMR,EAAIG,EAAIA,CAAG,CAAE,EA6B5C,SAASU,EAAOC,EAAI,CACnB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,OAAAJ,EAAKX,EAAOS,CAAE,EACdG,EAAKX,EAAOQ,CAAE,EACdC,EAAKhB,EAAMD,EAAKkB,CAAE,EAAGlB,EAAKmB,CAAE,CAAE,EAC9BC,EAAIX,EACCQ,GAAML,GACVM,EAAKhB,EAAKgB,EAAKP,CAAK,EACpBQ,EAAKjB,EAAKiB,EAAKR,CAAK,EACpBS,EAAIlB,EAAKkB,EAAIT,CAAK,GACPM,GAAMJ,IACjBK,EAAKhB,EAAKgB,EAAKJ,CAAc,EAC7BK,EAAKjB,EAAKiB,EAAKL,CAAc,EAC7BM,EAAIlB,EAAKkB,EAAIN,CAAc,GAEvBd,EAAMmB,CAAG,GAAKnB,EAAMkB,CAAG,GAC3BG,EAAInB,EAAKiB,EAAKD,CAAG,EACjBI,EAAIpB,EAAKO,EAAMP,EAAKgB,EAAKhB,EAAIiB,EAAGE,CAAC,CAAE,CAAE,EACrCH,EAAKI,EACLH,EAAKjB,EAAK,CAACmB,EAAIC,CAAE,IAEjBD,EAAInB,EAAKgB,EAAKC,CAAG,EACjBG,EAAIpB,EAAKO,EAAMP,EAAKiB,EAAKjB,EAAIgB,EAAGG,CAAC,CAAE,CAAE,EACrCH,EAAKhB,EAAKmB,EAAIC,CAAE,EAChBH,EAAK,CAACG,GAEPJ,EAAKhB,EAAKgB,EAAKE,CAAE,EACjBD,EAAKjB,EAAKiB,EAAKC,CAAE,EACV,IAAId,EAAWY,EAAIC,CAAG,CAC9B,CAKApB,EAAO,QAAUgB,IClEjB,IAAIQ,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "absf", "maxf", "f32", "FLOAT32_BIGGEST", "FLOAT32_SMALLEST", "EPS", "Complex64", "realf", "imagf", "ONE", "TWO", "HALF", "LARGE_THRESHOLD", "SMALL_THRESHOLD", "RECIP_EPS_SQR", "cinvf", "z", "ab", "re", "im", "s", "r", "t", "main"]
}
